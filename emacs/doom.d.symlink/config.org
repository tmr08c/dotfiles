* Introduction

Emacs config for @tmr08c.

** DOOM

I am using [[https://github.com/hlissner/doom-emacs][DOOM]]. This means a lot of the heavy lifting is done by DOOM and through the module enabled in [[file:init.el][init.el]].

*** Notes

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* Identification

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src elisp
(setq user-full-name "Troy Rosenberg"
      user-mail-address "tmr08c@gmail.com")
#+end_src

* UI
** Font

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

- `doom-font'
- `doom-variable-pitch-font'
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src elisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 13 :height 1.0)
      doom-variable-pitch-font (font-spec :family "ETBembo" :style "RomanOSF" :height 1.3))
#+end_src

** Theme

Set default theme

#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+end_src

Leverage [[https://github.com/d12frosted/homebrew-emacs-plus#system-appearance-change][hook]] provided by =emacs-plus= for macOS's light/dark mode theme change.

#+begin_src elisp
(defun tr/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-one-light t))
    ('dark (load-theme 'doom-one t))))

(add-hook 'ns-system-appearance-change-functions #'tr/apply-theme)
#+end_src

** Lines

Default to using relative line numbers.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

Default to word-wrapping everywhere

#+begin_src elisp
(setq global-visual-line-mode t)
#+end_src

* Applications
** org-mode
*** Basic Set up

Set base directory for =org= files.

#+begin_src elisp
(setq org-directory "~/Library/CloudStorage/Dropbox/Notes/org/")
#+end_src

*** Templates

Having template files can be a bit easier to manager than creating the templates in-line as a part of configuration. We define a variable to point to our templates sub-directory, so we can reference it later.

#+begin_src elisp
(defconst tr/org-templates-directory (concat org-directory "templates/"))
#+end_src

Extend the [[https://github.com/hlissner/doom-emacs/issues/1391#issuecomment-489993881][existing capture templates from DOOM]].

#+begin_src elisp
(after! org
  (add-to-list 'org-capture-templates
             `("l" "TIL" entry
               (file ,(expand-file-name "til.org" org-directory))
               "* %t\nSomething"))
  (add-to-list 'org-capture-templates
             `("w" "What I did this Week" item (file+datetree ,(expand-file-name "work/cpower/what-i-did-this-week.org" org-directory)) "- %?"))
  (add-to-list 'org-capture-templates
             `("ma" "DERMS+ Advisory Committee" entry (file+datetree ,(expand-file-name "work/cpower/derms-advisory.org" org-directory)) "*** Prep\n- %?\n*** Meeting Notes" :jump-to-capture t))
  (add-to-list 'org-capture-templates
             `("ms" "DERMS+ SteerCo" entry (file+datetree ,(expand-file-name "work/cpower/derms-steering-committee.org" org-directory)) "*** Prep\n- %?\n*** Meeting Notes" :jump-to-capture t))
  (add-to-list 'org-capture-templates `("m" "Meetings")))
#+end_src

*** org-roam
Put org-roam files in a sub-directory with our other org files.

#+begin_src elisp
(setq org-roam-directory (concat org-directory  "roam/"))
#+end_src

**** Templates
Set up capture templates to use for creating new org-roam nodes. Inspired by [[https://jethrokuan.github.io/org-roam-guide/][other]] [[https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/][examples]], I am experimenting with different folders or "slipboxes" for different types of notes.

- reference :: notes on materials created by others (e.g., blog post, book)
- project :: pages for projects I am or want to work on
- default :: nodes for more discrete ideas or concepts

#+begin_src emacs-lisp
(let* ((file-name "%<%Y%m%d%H%M%S>-${slug}.org")
       (project-file-name (concat "project/" file-name))
       (ref-file-name (concat "ref/" file-name))
       (properties "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n"))
  (setq org-roam-capture-templates
        `(("d" "default" plain "%?" :target
           (file+head ,file-name ,properties)
           :unnarrowed t)
          ("p" "project" plain "%?" :target
           (file+head ,file-name ,(concat properties "#+filetags: :project:\n\n
,* Overview
,** Brainstorm
,#+begin_comment
- what are the goals of the project?
- what do you think needs to be done?
- what are topics that will be relevant for this?
,#+end_comment
,** Relevant Resources
,#+begin_comment
Spend some time (15-30 minutes) going through the process of [[id:c4b0a1da-da9e-40fe-8c38-129fe47b8292][finding relevant notes]] in your system, turning to outside resources.
,#+end_comment
,* Bridge
,** Current Status
,** Task List [/]")) :unnarrowed t)
          ("r" "reference")
          ("ra" "ref-article" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :article:\n\nlink :: ${link}\n\n"))
           :unnarrowed t)
          ("rb" "ref-book" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :book:\n\nauthor :: ${author} \n* Summary
,** What problem(s) does the book intend to solve?
,** How proposed solution(s) does it have for these problem(s)?
,** The book in three sentences
  1.
  2.
  3.
,** Impressions
  ,#+BEGIN_COMMENT
  What are your personal feelings and takeaways after reading the book?
  ,#+END_COMMENT
,** Who should read it?
,** How the book changed me
,** Rating
,* Notes"))
           :unnarrowed t)
          ("rc" "ref-company" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :company:\n\n"))
           :unnarrowed t)
          ("rp" "ref-person" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :person:\n\n"))
           :unnarrowed t)
          ("rv" "ref-video" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :video:\n\n"))
           :unnarrowed t))))
#+end_src

***** WAIT Remove "book summary" snippet
SCHEDULED: <2023-03-31 Fri>
Including the book summary in the capture template for book notes may mean I no longer need the snippet.
***** Updating ~last_modified~ timestamps

My templates include ~created_at~ and ~last_modified~ fields. To update the =last_modified= field, we leverage the built-in =time-stamp= function.

#+begin_src emacs-lisp
(after! org
  (setq time-stamp-active t
        time-stamp-start "#\\+last_modified: [\t]*"
        time-stamp-end "$"
        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (add-hook 'before-save-hook 'time-stamp))
#+end_src

The =last_modified= work was based on [[https://commonplace.doubleloop.net/adding-timestamps-to-org-roam-notes][this post]], which also pointed me to [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/16][this org-roam Discourse thread]].

***** Dailies
Configure org roam dailies to use our own template for daily files.

#+begin_src elisp
(require 'f)
(setq org-roam-dailies-capture-templates
      (let ((daily-template (f-read-text (expand-file-name  "daily.org" tr/org-templates-directory)))
            (daily-file "%<%Y-%m-%d>.org"))
        `(("d" "default" entry ""
           :target (file+head+olp ,daily-file ,daily-template ("Grateful or Excited About"))))))
#+end_src
**** Capturing
***** From elfeed
Learning from [[https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/][this post]], add a function for creating a new node from the currently viewed elfeed entry.

#+begin_src elisp
(defun tr/elfeed--create-roam-node ()
  "Create roam node from current elfeed entry"
  (interactive)
  (let* ((title (elfeed-entry-title elfeed-show-entry))
         (link (plist-get (elfeed-link-store-link) :link)))
    (org-roam-capture-
     :keys "ra"
     :node (org-roam-node-create :title title )
     :info (list :link link))))
#+end_src

***** Capture based on context
Create a DWIM-style function that attempts to use the context of capturing a note to do what I mean. It will fallback to a normal capture template prompt if it's not sure.

#+begin_src elisp
(defun tr/org-roam--dwim-capture ()
  (interactive)
  (pcase major-mode
    ('elfeed-show-mode       (tr/elfeed--create-roam-node))
    ;; default to org-roam's capture
    (mode           (org-roam-capture)))
  )

(map! :leader
      (:prefix "n"
       (:prefix "r"
        :desc "DWIM capture"
        "N" #'tr/org-roam--dwim-capture)))
#+end_src
**** TODO org-roam-ui

Config currently copy/pasted from the repo.

#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

*** Weekly Reviews

At the end of each week I fill out a review/journal entry into an org file.

I am leveraging DOOM's ~file-templates~ modules to auto-fill my weekly reviews based on a snippet. First, I set up some helpful variables.

#+begin_src elisp
(setq tr/weekly-review--weekly-review-directory (expand-file-name "weekly-reviews/" org-directory))
(setq tr/weekly-review--file-name-regexp "[[:digit:]]\\{8\\}-weekly-review.org")
(setq tr/weekly-review--file-name-format "%Y%m%d-weekly-review.org")
#+end_src

I register a new file template that looks for files that match a specified regex and use my snippet "wr" (for weekly review).

#+begin_src elisp
(set-file-template! tr/weekly-review--file-name-regexp :mode 'org-mode :trigger "wr")
#+end_src

Now I can write a function to open a file with a name that matches the regular expression above and it will autoload my template.

#+begin_src elisp
(defun tr/weekly-review--new-entry ()
  "Create a new weekly review entry"
  (interactive)
  (find-file (expand-file-name (format-time-string tr/weekly-review--file-name-format) tr/weekly-review--weekly-review-directory)))
#+end_src

And another function that finds the most recent entry in my weekly reviews directory and opens it.

#+begin_src elisp
(defun tr/weekly-review--find-current-entry ()
  "Find and open the most recent weekly review file"
  (interactive)
  (find-file (car (last (directory-files tr/weekly-review--weekly-review-directory 'full tr/weekly-review--file-name-regexp 'nil)))))
#+end_src

I bind these to be under the ~n~ (~notes~) prefix with DOOM, since that is where other org-related functionality goes.

#+begin_src elisp
(map! :leader
      (:prefix "n"
       (:prefix ("w" . "Weekly Review")
        :desc "New Entry"
        "n" #'tr/weekly-review--new-entry
        :desc "Current Entry"
        "w" #'tr/weekly-review--find-current-entry)))
#+end_src

** elfeed

Elfeed is an RSS reader within Emacs and is enabled with the ~rss~ module from DOOM. I also have the ~org~ flag enabled, so my feed list can be found in [[org:elfeed.org][elfeed.org]].

Let's add a shortcut to make it easier to open ~elfeed~. I am going to use the =o(pen)= mnemonic, similar to what is done for ~mu4e~.

#+begin_src elisp
(map! :leader
      (:prefix "o"
        "e" #'=rss))
#+end_src

In the DOOM docs, they include a snippet to have elfeed update on opening. This seems useful.

#+begin_src elisp
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

Since I don't always get through all of the articles, I want to widen the default search query a bit.  This also has a potentially positive side effect of getting a recent article or two from newly added feeds. Because this range is wider, I default to only showing unread entries.

  #+begin_src elisp
(after! elfeed
  (setq elfeed-search-filter "@3-month-ago +unread")
  (setq elfeed-sort-order 'ascending))
  #+end_src

*** Keep database in sync

Let's put our elfeed DB in Dropbox, so it will sync. Out of ease/laziness, I am going to place it within ~org-directory~, since that is a part of Dropbox I already expect Emacs-related things to live within.

#+begin_src elisp
(setq elfeed-db-directory (concat org-directory "elfeed/db/"))
#+end_src

I may check my feeds across multiple machines. To keep the database in sync, I want to safe it before we close elfeed. There are [[https://github.com/skeeto/elfeed/issues/169][alternative options]] such as writing a custom function to use for quitting or mention of hooking into the update function. Since my current usage of elfeed is limited to weekly reading sessions that I quit out of at the end, this seems to work for me.

#+begin_src elisp
(advice-add 'elfeed-kill-buffer :before 'elfeed-db-save-safe)
#+end_src
** email
I am using the ~mu4e~ module from DOOM for managing email.

Let's set up my personal Gmail account below.

#+begin_src emacs-lisp
(set-email-account! "personal"
  '((mu4e-sent-folder       . "/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/[Gmail]/Trash")
    (mu4e-refile-folder     . "/Processed")
    (smtpmail-smtp-user     . "tmr08c@gmail.com")
    (smtpmail-smtp-server  . "smtp.gmail.com")
    (smtpmail-smtp-service . 465)
    (smtpmail-stream-type  . ssl))
  t)
#+end_src
*** Sending mail
While it doesn't seem to be the preferred long-term solution, I am using built-in Emacs functionality for sending email. Since I am still getting used to using ~mu4e~ for email and don't send that many emails, this has sufficed. If I dive in further, I may want to revisit the DOOM docs which mention SMTP servers or forwarders.

#+begin_src emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src

I also use the following to fix a macOS [[https://github.com/doomemacs/doomemacs/issues/6439][issue]] with the ordering of Keychain entries that was causing issues sending emails.

#+begin_src emacs-lisp
(after! auth-source
  (setq auth-sources (nreverse auth-sources)))
#+end_src
*** Bookmarks
I find that the default bookmarks end up a bit nosier than are useful for me. I think a large part of this, especially re: unread and recent messages, is that I don't really archive much, but instead put emails in a "processed" folder. As a result, filtering out archived/trashed emails doesn't really help me. I'm updating the bookmarks to be more focused around the Inbox. I'm also going to try out keeping a few of the others (today, last 7 days, etc.) to see how I like them.

#+begin_src elisp
(setq mu4e-bookmarks '(
        (:name "Inbox" :query "maildir:\"/INBOX\"" :key ?i)
        (:name "Unread Inbox" :query "maildir:\"/INBOX\" AND flag:unread" :key ?u)
        (:name "Today's messages" :query "date:today..now" :key ?t)
        (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)
        (:name "Flagged messages":query "flag:flagged" :key ?f)))
#+end_src

* Programming
** General
*** LSP

Set up LSP for smarter folding with lsp-origami. Config based on [[https://blog.evalcode.com/enable-elixir-code-folding-in-doom-emacs/][this post]].

#+begin_src elisp
(after! lsp-mode
  ;; Add origami and LSP integration
  (use-package! lsp-origami)
  (add-hook! 'lsp-after-open-hook #'lsp-origami-try-enable)

  ;; Enable folding
  (setq lsp-enable-folding t))
#+end_src

https://emacs-lsp.github.io/lsp-mode/page/faq/#how-do-i-force-lsp-mode-to-forget-the-workspace-folders-for-multi-root
#+begin_src elisp
(advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
#+end_src
*** Projectile

Tell Projectile to look into the =~/code= directory for adding new projects.

#+begin_src elisp
(setq projectile-project-search-path '("~/code/"))
#+end_src

Sort files by recently active buffers and then recently opened files.

#+begin_src elisp
(setq projectile-sort-order 'recently-active)
#+end_src

*** Formatting

Auto-formatting is enabled via =(format +onsave)= in =init.el=. There are some modes where this doesn't always work as well, so we can disable it.

#+begin_src elisp
(setq +format-on-save-enabled-modes
      '(not mhtml-mode)) ; doesn't work well with partials
#+end_src
*** SQL
**** Connecting to common databases

[[https://emacsredux.com/blog/2013/06/13/using-emacs-as-a-database-client/][Source]]

Create a list of common databases that I connect to. Running the command =sql-connect= will display this list and allow for me to use the configuration to quickly connect to a given database.

#+begin_src elisp
(setq sql-connection-alist
      '((derms-dev (sql-product 'postgres)
                (sql-port 5432)
                (sql-server "localhost")
                (sql-user "postgres")
                (sql-password "")
                (sql-database "derms_dev"))))
#+end_src

** Languages

Configuration tied to specific languages or modes.

*** Web

#+begin_src elisp
(after! web-mode
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2

        ;; Highlight the current element
        web-mode-enable-current-element-highlight t))
#+end_src

*** Elixir

;; (defun tr/flycheck-dialyxir-setup ()
;;   (interactive)
;;   (add-to-list 'flycheck-checkers 'elixir-dialyxir t))

;; (use-package! flycheck-elixir-dialyxir
;;   :after elixir-mode
;;   :config (tr/flycheck-dialyxir-setup))

;; (after! elixir-mode
;;   (after! lsp-mode
;;     (flycheck-add-next-checker 'lsp 'elixir-credo 'elixir-dialyxir)))

;; ;; Add buffer local Flycheck checkers after LSP for different major modes.
;; (defvar-local my-flycheck-local-cache nil)
;; (defun my-flycheck-local-checker-get (fn checker property)
;;   ;; Only check the buffer local cache for the LSP checker, otherwise we get
;;   ;; infinite loops.
;;   (if (eq checker 'lsp)
;;       (or (alist-get property my-flycheck-local-cache)
;;           (funcall fn checker property))
;;     (funcall fn checker property)))
;; (advice-add 'flycheck-checker-get
;;             :around 'my-flycheck-local-checker-get)
;; (add-hook 'lsp-managed-mode-hook
;;           (lambda ()
;;             (when (derived-mode-p 'haskell-mode)
;;               (setq my-flycheck-local-cache '((next-checkers . (haskell-hlint)))))))
;; (add-hook 'lsp-managed-mode-hook
;;           (lambda ()
;;             (when (derived-mode-p 'sh-mode)
;;               (setq my-flycheck-local-cache '((next-checkers . (sh-shellcheck)))))))
;; (add-hook 'lsp-managed-mode-hook
;;           (lambda ()
;;             (when (derived-mode-p 'tex-mode)
;;               (setq my-flycheck-local-cache '((next-checkers . (tex-chktex)))))))


You got =web-mode= in my =elixir-mode=! Leverage =polymode= to have web syntax highlighting for our LEEx and HEEx templates (when using sigils). Original implementation came from [[https://blog.evalcode.com/phoenix-liveview-inline-syntax-highlighting-for-emac][this post]].

#+begin_src elisp
(use-package! polymode
  :mode ("\\.ex\\'" . poly-elixir-web-mode)
  :init (setq! web-mode-engines-alist '(("elixir" . "\\.ex\\'")))
  :config
  (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
  (define-innermode poly-liveview-expr-elixir-innermode
    :mode 'web-mode
    :head-matcher (rx line-start (* space) (or "~L" "~H") (= 3 (char "\"'")) line-end)
    :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
    :head-mode 'host
    :tail-mode 'host
    :allow-nested nil
    :keep-in-mode 'host
    :fallback-mode 'host)
  (define-polymode poly-elixir-web-mode
    :hostmode 'poly-elixir-hostmode
    :innermodes '(poly-liveview-expr-elixir-innermode)))
#+end_src

**** DOOM hacks

DOOM will leverage [[https://github.com/jscheid/dtrt-indent][dtrt-indent]] which

#+begin_quote
guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.
#+end_quote

I was finding that, for could cause a noticeable delay on first open. [[https://github.com/doomemacs/doomemacs/issues/5823][This issue]] helped me identify the variable ~doom-detect-indentation-excluded-modes~ which could be used to exclude a mode from this behavior. Adding ~elixir-mode~ to this list resulted in a noticeable speed up without any noticeable indentation issues. I am guessing that Elixir's practice of using spaces for indentation and having a formatter may alleviate needs for having to guess at how to display indentation.

#+begin_src elisp
(after! doom-editor
  (add-to-list 'doom-detect-indentation-excluded-modes 'elixir-mode))
#+end_src

**** LSP
LSP will try to look in all directories within out project. This is a lot of files and can slow things down. We can configure it to ignore some build/dependency directories common to our project.

#+begin_src elisp
(after! lsp-mode
  (dolist (match
           '("[/\\\\].elixir_ls"
             "[/\\\\]node_modules$"
             "[/\\\\]deps"
             "[/\\\\]build"
             "[/\\\\]_build"))
    (add-to-list 'lsp-file-watch-ignored-directories match)))
#+end_src

LSP lens will provide suggested typespecs. This is nice, but I find it adds a fair amount of noise and the delay in updating it can make it sort of confusing when updating function definitions. As a result, I want to default to it being off when working in Elixir.

#+begin_src elisp
(after! elixir-mode
  (after! lsp-mode
    (setq lsp-lens-enable nil)))
#+end_src

**** ExUnit

Out of the box, DOOM provides bindings for most functions provided by [[https://github.com/ananthakumaran/exunit.el][exunit.el]]. One that it does not provide is ~exunit-debug~ (using IEx to run the test, so you can use ~IEx.pry~).

#+begin_src elisp
(map! :after elixir-mode
    :localleader
    :map elixir-mode-map
    :prefix "t"
    "d" #'exunit-debug)
#+end_src

*** Ruby

#+begin_src elisp
(setq rspec-use-spring-when-possible t)
#+end_src

*** Rust

#+begin_src elisp
(after! rustic (setq rustic-lsp-server 'rls))
#+end_src

* Writing

Configuration related to writing prose.  This is more general than the [[*org-mode][org-mode]] section, but, since a lot of writing happens in ~org-mode~, you may want to check that section as well.

*** Style

We will default to use DOOM's ~zen~ module when writing.  I find that the larger and more centered text is a bit more ascetically pleasing.

~zen~ mode also enables ~variable-pitch-mode~.  [[https://www.reddit.com/r/DoomEmacs/comments/l9jy0h/comment/gljibj9/?utm_source=share&utm_medium=web2x&context=3][This Reddit comment]] from ~@hlissner~ notes that ~variable-pitch-mode~ can have conflicts with other packages, namely ~solaire-mode~ and suggests instead using ~mixed-pitch-mode~

#+begin_quote
TL;DR Multiple face-remapping plugins = a bad time.

The simple workaround is to use mixed-pitch-mode everywhere you used to use variable-pitch-mode (they are roughly equivalent. The only difference is mixed-pitch-mode tries not to affect regions of text that are logically better left in a fixed-pitch font, such as tables or code blocks). It uses the more flexible strategy of swapping only their :family and :height attributes, rather than the entire faces.
#+end_quote

Using ~mixed-pitchmode~ combined with setting the [[*Font][DOOM font variables]] seems to work for me.

For the modes that I use for writing, I will enable ~zen~ mode and also turn off line numbers since they don't work with the ascetic.

#+begin_src elisp
(add-hook! 'writeroom-mode-enable-hook (display-line-numbers-mode -1))
(add-hook! 'org-mode-hook '+zen/toggle)
(add-hook! 'markdown-mode-hook '+zen/toggle)
(add-hook! 'elfeed-show-mode-hook '+zen/toggle)
#+end_src
